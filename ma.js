"use strict";
var React = require('react');
var ReactDOM = require('react-dom');
var container = require('./container');
container = document.getElementById('container');
function getRenderer(container) {
    var prevNode = container;
    function render(vNode) {
        ReactDOM.render(vNode, container);
    }
    return render;
}
if (module.hot) {
    console.log('this module is hot!');
    module.hot.accept('./ma.js', function (prevThis) {
        console.log(prevThis);
    });
}
var bb = require('./bb');
var csjs = require('csjs');
var classNames = require('classnames');
var buttonType = 'primary';
console.log(classNames((_a = {}, _a["btn-" + buttonType] = true, _a)));
var error = '';
var assign = require('object.assign/polyfill')();
Object.assign = assign;
var jsonLoaded = require('./abcd.json');
var Markdown = require('react-markdown');
var markdownInput = '# This is a header\n\nAnd this is a paragraph';
var green = '#33aa22';
var styles = (_b = ["\n\n  /* ", " */\n\n  @-webkit-keyframes yellow-fade {   \n     0% {background: yellow;}\n     100% {background: none;}\n  }\n\n  @keyframes yellow-fade {\n     0% {background: yellow;}\n     100% {background: none;}\n  }\n\n  .highlight {\n     -webkit-animation: yellow-fade 2s ease-in 1;\n     animation: yellow-fade 2s ease-in 1;\n  }\n\n  .panel {\n    border: 1px solid black;\n    background-color: ", ";\n  }\n  .title {\n    padding: 4px;\n    font-size: 15px;\n  }\n\n"], _b.raw = ["\n\n  /* ", " */\n\n  @-webkit-keyframes yellow-fade {   \n     0% {background: yellow;}\n     100% {background: none;}\n  }\n\n  @keyframes yellow-fade {\n     0% {background: yellow;}\n     100% {background: none;}\n  }\n\n  .highlight {\n     -webkit-animation: yellow-fade 2s ease-in 1;\n     animation: yellow-fade 2s ease-in 1;\n  }\n\n  .panel {\n    border: 1px solid black;\n    background-color: ", ";\n  }\n  .title {\n    padding: 4px;\n    font-size: 15px;\n  }\n\n"], csjs(_b, __filename, green));
var css = csjs.getCss(styles);
var insertCss = require('insert-css');
insertCss(css + '\n' + '//# \u0073ourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzY3JpcHQuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2V4YW1wbGUuY29tL2FwcC9qcy8ifQ==');
var timing = '';
if (window.performance) {
    var pageLoadTiming = {};
    for (var k in window.performance.timing) {
        if (k !== 'toJSON') {
            pageLoadTiming[k] = window.performance.timing[k];
        }
    }
    pageLoadTiming.code = (new Date()).valueOf();
    timing = JSON.stringify(pageLoadTiming, null, 2);
}
function iOS8Minus() {
    if (/iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream) {
        return window.performance ? false : true;
    }
    return false;
}
var iOSBugfix = iOS8Minus();
function foo_(files1, files2) {
    var size = 0;
    return (React.createElement("div", {className: styles.highlight}, 
        error, 
        React.createElement("pre", {style: { fontSize: '10px' }}, timing), 
        files2 && React.createElement("h1", null, 
            "Files 2 ", 
            files2[0].size), 
        files1 && React.createElement("h1", null, 
            "Files 1 ", 
            files1[0].size), 
        window.Worker && React.createElement("h1", null, "Hello here!"), 
        React.createElement("a", {className: styles.panel, href: "#", id: "fileSelect", onclick: function (e) {
            var fileElem = document.getElementById("files");
            if (fileElem) {
                fileElem.click();
            }
            e.preventDefault();
        }}, "Select some files"), 
        iOSBugfix &&
            (React.createElement("div", null, 
                React.createElement("input", {type: "file", accept: "image/*", multiple: true, id: "files", style: { display: 'none' }, onChange: function () {
                    render(foo_(this.files, files2));
                }}), 
                React.createElement("input", {type: "file", accept: "image/*", onChange: function () {
                    render(foo_(files1, this.files));
                }}), 
                React.createElement("br", null), 
                React.createElement("input", {type: "file", accept: "video/*", onChange: function () {
                    render(foo_(files1, this.files));
                }}), 
                React.createElement("br", null))) ||
            (React.createElement("input", {type: "file", multiple: true, id: "files", style: { display: 'none' }, onChange: function () {
                render(foo_(this.files, files2));
            }})), 
        React.createElement("br", null), 
        "Reloading works", 
        React.createElement("br", null), 
        React.createElement("input", {type: "file", onChange: function () {
            render(foo_(files1, this.files));
        }}), 
        React.createElement("br", null)));
}
var files = [{ size: 0 }];
var windowURL = window.URL || window.webkitURL;
var duration = 0;
function foo() {
    var preview = React.createElement("div", null);
    if (files[0].size) {
        var imageType = /^image\//;
        var videoType = /^video\//;
        if (imageType.test(files[0].type)) {
            preview = React.createElement("div", null, 
                React.createElement("img", {src: windowURL.createObjectURL(files[0]), height: "60", onload: function () {
                    window.URL.revokeObjectURL(this.src);
                }})
            );
        }
        else if (videoType.test(files[0].type)) {
            preview = React.createElement("video", {id: "video1", width: "96", height: "54", src: windowURL.createObjectURL(files[0]), preload: "metadata", onLoadedMetadata: function (evt) {
                windowURL.revokeObjectURL(evt.target.src);
                var was = 0 === duration;
                duration = evt.target.duration;
                if (was) {
                    render(foo());
                }
            }});
        }
        else {
            preview = React.createElement("div", null, files[0].type);
        }
    }
    return React.createElement("div", {className: styles.highlight}, 
        React.createElement(Markdown, {source: markdownInput}), 
        React.createElement(Markdown, {source: "**" + duration + "**"}), 
        preview, 
        files[0].size, 
        React.createElement("input", {type: "file", id: "files", onChange: function (evt) {
            if (files[0].size === 0) {
                files = evt.target.files;
            }
            render(foo());
        }}), 
        "Hello!!", 
        duration);
}
var render = getRenderer(container);
render(foo());
console.log('main starting');
var a = require('./a.js');
var b = require('./b.js');
console.log('in main, a.done=%j, b.done=%j', a.done, b.done);
var _a, _b;
//# sourceMappingURL=data:application/json;base64,